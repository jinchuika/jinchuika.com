<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programación on Jinchuika</title>
    <link>https://jinchuika.com/es/tags/programaci%C3%B3n/</link>
    <description>Recent content in programación on Jinchuika</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Luis Carlos Contreras</copyright>
    <lastBuildDate>Sun, 08 Sep 2019 19:11:07 -0600</lastBuildDate><atom:link href="https://jinchuika.com/es/tags/programaci%C3%B3n/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cómo crear un Bot de instagram con Python</title>
      <link>https://jinchuika.com/es/post/10-instagram-bot/</link>
      <pubDate>Sun, 08 Sep 2019 19:11:07 -0600</pubDate>
      
      <guid>https://jinchuika.com/es/post/10-instagram-bot/</guid>
      <description>¿Te ha pasado que páginas o personas que no conoces de la nada dan like a tus publicaciones o te siguen en Instagram? Por lo general esas páginas son bots, programados para realizar estas acciones.En este post aprenderemos cómo crear un bot de Instagram para ganar más seguidores utilizando Python. Al final del post puedes encontrar la explicación en video (puedes ir directamente desde aquí) sobre cómo hacer el procedimiento (aunque si solo quieres copiar y pegar, seguramente es más fácil).</description>
    </item>
    
    <item>
      <title>Programación orientada a objetos: Herencia de clases</title>
      <link>https://jinchuika.com/es/post/9-oop-tutorial-1/</link>
      <pubDate>Thu, 05 Sep 2019 14:17:14 -0600</pubDate>
      
      <guid>https://jinchuika.com/es/post/9-oop-tutorial-1/</guid>
      <description>Hice un video tutorial donde explico cómo funciona la herencia de clases en programación orientada a objetos.
Primera parte Segunda parte Código fuente A continuación puedes encontrar el código utilizado en este video:
class Vehiculo: nombre = &amp;#39;&amp;#39; llantas = 0 motor = 0 encendido = &amp;#34;Apagado&amp;#34; def __init__(self, nombre, llantas, motor): self.nombre = nombre self.llantas = llantas self.motor = motor def encender(self): self.encendido = &amp;#34;Encendido&amp;#34; def apagar(self): self.encendido = &amp;#34;Apagado&amp;#34; class Auto(Vehiculo): puertas = 0 puertas_abiertas = False def __init__(self, nombre, llantas, motor, puertas): self.</description>
    </item>
    
    <item>
      <title>Por qué usar Python para desarrollar inteligencia artificial</title>
      <link>https://jinchuika.com/es/post/5-por-que-python/</link>
      <pubDate>Fri, 19 Apr 2019 22:40:23 -0600</pubDate>
      
      <guid>https://jinchuika.com/es/post/5-por-que-python/</guid>
      <description>Esta pregunta nunca falta en todas las confererncias o clases sobre introducción a la inteligencia artificial. Dado que muchas personas que empiezan en esta área tienen experiencia en otros lenguajes, consideré importante saber por qué vale la pena darle una oportunidad a Python.
Es muy fácil de aprender y utilizar Cuando hablamos de ciencia de datos, es muy importante comprender los conceptos matemáticos y estadísticos que fundamentan los algoritmos. Recorrer estos temas nos llevará mayor o menor tiempo dependiendo de nuestra experiencia previa con ellos.</description>
    </item>
    
  </channel>
</rss>
